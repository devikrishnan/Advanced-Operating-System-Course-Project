from __future__ import print_function

import sys
import os
import argparse
lib_list=[]
# DEFAULT NOT MENTIONED
parser = argparse.ArgumentParser(description='Summarises the size of each object file in an ld linker map.')
parser.add_argument('map_file', help="A map file generated by passing -M/--print-map to ld during linking.")
parser.add_argument('--combine', action='store_true',
                    help="All object files in an .a archive or in a directory are combined")
args = parser.parse_args()

class SectionSize():
    code = 0
    data = 0  # Including metadata like import tables
    def total(self):
        return self.code + self.data
    def add_section(self, section, size):
        if section.startswith('.comment'):
            return
        if section.startswith('.debug'):
            return
        if section.startswith('.ARM.attributes'):
            return
        if section.startswith('.text'):
            self.code += size
        elif section != '.bss':
            self.data += size


size_by_source = {}
with open(args.map_file) as f:
    lines = iter(f)
    #import IPython;IPython.embed()
    for line in lines:
        #import IPython;IPython.embed()
        if line.strip() == "Linker script and memory map":
            break

    current_section = None
    split_line = None
    for line in lines:
        line = line.strip('\n')
        if split_line:
            # Glue a line that was split in two back together
            if line.startswith(' ' * 16):
                line = split_line + line
            else:  # Shouldn't happen
                print("Warning: discarding line ", split_line)
            split_line = None

        if line.startswith((".", " .", " *fill*")):       #if line startswith any of the following strings given
            #print("****************************** %s" %line)
            pieces = line.split(None, 3)  # Don't split paths containing spaces   #takes in first variable , address, code size
            if line.startswith("."):    
                # Note: this line might be wrapped, with the size of the section
                # on the next line, but we ignore the size anyway and will ignore that line
                current_section = pieces[0]
            elif len(pieces) == 1 and len(line) > 14:
                # ld splits the rest of this line onto the next if the section name is too long
                split_line = line
            elif len(pieces) >= 3 and "=" not in pieces and "before" not in pieces:
                if pieces[0] == "*fill*":
                    source = pieces[0]
                    size = int(pieces[-1], 16)
                else:
                    source = pieces[-1]    #last element of the pieces list = which is the path containing .a and .o
                    size = int(pieces[-2], 16)

                if args.combine:     #Todo:understand the checking condition
                    if '.a(' in source:
                        #print(source)
                        # path/to/archive.a(object.o)
                        source = source[:source.index('.a(') + 2]
                        if 'cm3' in source:
                            libra=source[source.index('cm3')+4:source.index('.a')]
                            lib_list.append(libra)
                        elif 'miosix' in source:
                            libra=source[source.index('miosix')+7:source.index('.a')]
                            lib_list.append(libra)
                        #import IPython;IPython.embed()
                    #elif source.endswith('.o'):
                        #print(source)
                    #    where = max(source.rfind('\\'), source.rfind('/'))
                        #print(source)
                        #import IPython;IPython.embed() 
                    #    if where:
                    #        source = source[:where + 1] + '*.o' #did not understand
                    #        print(source)
                            #import IPython;IPython.embed()

                if source not in size_by_source:
                    size_by_source[source] = SectionSize()
                size_by_source[source].add_section(current_section, size)



lib_list=set(lib_list)
#print(size_by_source)
sources = list(size_by_source.keys())
#print(sources)
sources.sort(key = lambda x: size_by_source[x].total())
sumtotal = sumcode = sumdata = 0
for source in sources:
    size = size_by_source[source]
    sumcode += size.code
    sumdata += size.data
    sumtotal += size.total()

part1={}
pie={}
sumtotal_lib=sumtotal_nonlib=0
for s in sources:   
    if 'main.o' in s:
        size = size_by_source[s]
        sumtotal_nonlib += size.total()
    else:
        size = size_by_source[s]
        sumtotal_lib += size.total() 

pie={'pie1': {'lib':sumtotal_lib,'nonlib':sumtotal_nonlib}}
pie['lib']={}


for libs in lib_list:
    pie[libs]={}


for i in lib_list:
    libsize=0
    for s in sources: 
        if i in s:
            size = size_by_source[s]
            libsize=libsize+size.total()
    pie['lib'].update({i:libsize})


print(pie)


#for k,v in pie.items():
    #print (k,v) 


#print("%-40s \t%7s  (code: %d data: %d)" % (os.path.normpath(source), size.total(), size.code, size.data))
#print("TOTAL %d  (code: %d data: %d)" % (sumtotal, sumcode, sumdata))



#group comment = ctrl+k+c and group uncomment ctrl+k+u


